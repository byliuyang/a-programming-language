#lang plai-typed
; 1) Test for raw object with two methods
(define ChangeOneClass '(class ChangeOne ()
                            (parent Object)
                            (private)
                            (public)
                            (add1 (fun (x) (+ x 1)))
                            (sub1 (fun (x) (- x 1)))))
; Test for unbound class name
(test/exn (run/classes '(with ([o (new NotKnown)])
                          (send o sub1 10))
                   (list ChangeOneClass))
      "unbound classname")
; Tests for accessing methods
(test (run/classes '(with ([o (new ChangeOne)])
                          (send o sub1 10))
                   (list ChangeOneClass))
      (numV 9))

(test (run/classes '(with ([o (new ChangeOne)])
                          (send o add1 10))
                   (list ChangeOneClass))
      (numV 11))

; 2) Test for raw object cannot find undefineded method
(test/exn (run/classes '(with ([o (new ChangeOne)])
                          (send o dontknow))
                   (list ChangeOneClass))
      "unbound")

; 3) Test for object with variable
(define ChangeOneCountPrivateClass '(class ChangeOneCountPrivate (init)
                            (parent Object)
                            (private (count init))
                            (public)
                            (inc (fun () (set count (+ count 1))))
                            (dec (fun () (set count (- count 1))))
                            (get (fun () count))))

(test (run/classes '(with ([o (new ChangeOneCountPrivate 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o get)))
                   (list ChangeOneCountPrivateClass))
      (numV (- (+ (+ 5 1) 1) 1)))

; 4) Test for object with private variable
(test/exn (run/classes '(with ([o (new ChangeOneCountPrivate 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o get-count)))
                   (list ChangeOneCountPrivateClass))
      "unbound")

; 5) Test for object with public variable
(define ChangeOneCountPublicClass '(class ChangeOneCountPublic (init)
                            (parent Object)
                            (private)
                            (public (count init) (tmp (+ 1 init)))
                            (inc (fun () (set count (+ count 1))))
                            (dec (fun () (set count (- count 1))))
                            (get (fun () count))))
; Getter
(test (run/classes '(with ([o (new ChangeOneCountPublic 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o get-count)))
                   (list ChangeOneCountPublicClass))
      (numV (- (+ (+ 5 1) 1) 1)))

(test (run/classes '(with ([o (new ChangeOneCountPublic 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o get-tmp)))
                   (list ChangeOneCountPublicClass))
      (numV 6))
; Setter
(test (run/classes '(with ([o (new ChangeOneCountPublic 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o set-count 4)
                               (send o get-count)))
                   (list ChangeOneCountPublicClass))
      (numV 4))
(test (run/classes '(with ([o (new ChangeOneCountPublic 5)])
                          (seq (send o inc)
                               (send o inc)
                               (send o dec)
                               (send o set-tmp 2)
                               (send o set-count 4)
                               (send o get-tmp)))
                   (list ChangeOneCountPublicClass))
      (numV 2))

; 6) Test for inheritance, perform function call from parent class
(define ChangeOneCountPublicSubClass '(class ChangeOneCountPublicSub (init)
                                        (parent ChangeOneCountPublic)
                                        (private)
                                        (public (amount init))
                                        (add-sub (fun (x)
                                                  (send self set-count (+ (send self get-count) x))))))

(test (run/classes '(with ([o (new ChangeOneCountPublicSub 0)])
                          (seq
                           (send o set-count 10)
                           (send o inc)
                           (send o add-sub 4)
                           (send o get-count)))
                   (list ChangeOneCountPublicClass ChangeOneCountPublicSubClass))
      (numV 15))

(test/exn (run/classes '(with ([o (new ChangeOneCountPublicSub 0)])
                           (send o notknown))
                   (list ChangeOneCountPublicClass ChangeOneCountPublicSubClass))
      "unbound")